version: '3.9'
services:
    pim:
        container_name: "pim"
        hostname: "pim.${BASE_DOMAIN}"
        build:
            target: swoole
            context: ./docker/php
            dockerfile: swoole.dockerfile
        ports:
            - ${PIM_PORT:-8000}:8000
        volumes:
            - ./modules/pim/main:/var/www
            - ./modules/pim/main/clients:/var/www/storage/ensi/public/catalog
        depends_on:
            database:
                condition: service_started
        networks:
            - dev

    pim-admin-backend:
        container_name: "pim-admin-backend"
        hostname: "pim-admin-backend.${BASE_DOMAIN}"
        build:
            target: swoole
            context: ./docker/php
            dockerfile: swoole.dockerfile
        ports:
            - ${ADMIN_PORT:-8002}:8002
        volumes:
            - ./modules/pim/admin-backend:/var/www
        depends_on:
            pim:
                condition: service_started
        networks:
            - dev

    pim-admin-frontend:
        container_name: "pim-admin-frontend"
        hostname: "pim-admin-frontend.${BASE_DOMAIN}"
        build:
            target: runner
            context: ./modules/pim/admin-frontend
            dockerfile: Dockerfile
        ports:
            - ${GUI_PORT:-3000}:3000
        networks:
            - dev
    gateway:
        build: ./modules/gateway
        env_file:
            - ./modules/gateway/.env
        volumes:
            - ./modules/gateway:/app
        ports:
            - "3333:80"
        depends_on:
            - redis
            - elastic
        networks:
            - dev

    user_app:
        build:
            context: ./modules/user
            target: app-dev
        restart: unless-stopped
        volumes:
            - ./modules/user:/app
        networks:
            - dev

    user_web:
        build:
            context: ./modules/user
            target: web-dev
        restart: unless-stopped
        ports:
            - "8080:8080"
        environment:
            PHP_FPM_HOST: user_app
        volumes:
            - ./modules/user/public:/app/public
        depends_on:
            - user_app
        networks:
            - dev

    database:
        container_name: "database"
        image: postgis/postgis:16-master
        hostname: "pim-database.${BASE_DOMAIN}"
        volumes:
            - "./docker/database/data:/var/lib/postgresql/data"
            - "./docker/database/bin:/docker-entrypoint-initdb.d"
        ports:
            - ${DB_PORT:-5432}:5432
        environment:
            POSTGRES_MULTIPLE_DATABASES: ${DB_LIST_BE_INSTALLED}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        networks:
            - dev

    pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin4_container
        restart: always
        ports:
            - "5050:80"
        environment:
            PGADMIN_DEFAULT_EMAIL: postgres@mail.ru
            PGADMIN_DEFAULT_PASSWORD: example
        networks:
            - dev

    elastic:
        container_name: "elastic"
        image: elasticsearch:8.11.0
        hostname: "elastic.${BASE_DOMAIN}"
        environment:
            - "discovery.type=single-node"
            - "bootstrap.memory_lock=true"
            - "read_only_allow_delete=false"
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - "xpack.security.enabled=false"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - "./docker/elastic/data:/usr/share/elasticsearch/data/1:rw"
        ports:
            - ${ELASTIC_PORT:-9200}:9200
        networks:
            - dev

    #    kibana:
    #        container_name: "kibana"
    #        image: kibana:8.11.0
    #        hostname: "kibana.${BASE_DOMAIN}"
    #        environment:
    #            - "ELASTICSEARCH_URL=http://elastic.${BASE_DOMAIN}:${ELASTIC_PORT:-9200}"
    #            - "ELASTICSEARCH_HOSTS=http://elastic.${BASE_DOMAIN}:${ELASTIC_PORT:-9200}"
    #            - "XPACK_GRAPH_ENABLED=false"
    #            - "XPACK_ML_ENABLED=false"
    #            - "XPACK_REPORTING_ENABLED=false"
    #            - "XPACK_WATCHER_ENABLED=false"
    #            - "VIRTUAL_HOST=kibana.${BASE_DOMAIN}"
    #            - "VIRTUAL_PORT=${KIBANA_PORT:-5601}"
    #        networks:
    #            - dev

    es:
        container_name: "es"
        image: nginx:mainline-alpine3.18-slim
        hostname: "es.nginx.${BASE_DOMAIN}"
        environment:
            VIRTUAL_HOST: "es.${BASE_DOMAIN},imgproxy.${BASE_DOMAIN}"
            ORIGINAL_HOST: "es.${BASE_DOMAIN}"
            IMGPROXY_HOST: "imgproxy.${BASE_DOMAIN}"
        volumes:
            - "./docker/es/default.conf.template:/etc/nginx/templates/default.conf.template"
            - "./docker/es/cache:/var/lib/nginx/proxy_cache"
            - "./docker/es/data/public:/var/www/data"
        networks:
            - dev

    #    imgproxy:
    #        container_name: "imgproxy"
    #        image: darthsim/imgproxy:latest
    #        environment:
    #            IMGPROXY_LOCAL_FILESYSTEM_ROOT: /data
    #        network_mode: "service:es"
    #        volumes:
    #            - "./docker/es/data/public:/data"

    #    kafka:
    #        container_name: "kafka"
    #        image: dockerhub.greensight.ru/services/kafka:latest
    #        hostname: "kafka.${BASE_DOMAIN}"
    #        expose:
    #            - "9093"
    #        environment:
    #            KAFKA_SECURITY_PROTOCOL: SASL_PLAINTEXT
    #            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
    #            KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
    #            KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
    #            KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    #            KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
    #            KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka.${BASE_DOMAIN}:9093,OUTSIDE://kafka.${BASE_DOMAIN}:9092
    #            KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    #            KAFKA_ZOOKEEPER_CONNECT: zookeeper.kafka.${BASE_DOMAIN}:2181
    #            KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka-conf/kafka_server_jaas.conf"
    #        volumes:
    #            - "./docker/kafka/data:/etc/kafka"
    #            - "./docker/kafka/kafka_server_jaas.conf:/etc/kafka-conf/kafka_server_jaas.conf"
    #        ports:
    #            - "${KAFKA_PORT:-9092}:9092"
    #        depends_on:
    #            - zookeeper
    #        networks:
    #            - dev

    #    zookeeper:
    #        container_name: "zookeeper"
    #        image: dockerhub.greensight.ru/services/zookeeper:latest
    #        ulimits:
    #            nofile:
    #                soft: 65536
    #                hard: 65536
    #        hostname: "zookeeper.kafka.${BASE_DOMAIN}"
    #        expose:
    #            - "2181"
    #        networks:
    #            - dev

    #    kafka-ui:
    #        container_name: "kafka-ui"
    #        image: provectuslabs/kafka-ui:master
    #        hostname: "kafka-ui.${BASE_DOMAIN}"
    #        environment:
    #            VIRTUAL_HOST: "kafka-ui.${BASE_DOMAIN}"
    #            VIRTUAL_PORT: "8080"
    #            KAFKA_CLUSTERS_0_NAME: local
    #            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka.${BASE_DOMAIN}:${KAFKA_PORT:-9092}
    #            KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper.kafka.${BASE_DOMAIN}:2181
    #            KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: SASL_PLAINTEXT
    #            KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM: PLAIN
    #            KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG: 'org.apache.kafka.common.security.plain.PlainLoginModule required username="client" password="secret";'
    #        ports:
    #            - "8083:8080"
    #        networks:
    #            - dev

    redis:
        container_name: "redis"
        image: redis:7
        hostname: "redis.${BASE_DOMAIN}"
        ports:
            - "${REDIS_PORT:-6379}:6379"
        networks:
            - dev

    redis-ui:
        container_name: "redis-ui"
        image: rediscommander/redis-commander:latest
        hostname: "redis-ui.${BASE_DOMAIN}"
        environment:
            - "VIRTUAL_HOST=redis-ui.${BASE_DOMAIN}"
            - "VIRTUAL_PORT=8081"
            - "REDIS_HOSTS=local:redis.${BASE_DOMAIN}:${REDIS_PORT:-6379}"
        networks:
            - dev

#    proxy:
#        container_name: "proxy"
#        image: nginxproxy/nginx-proxy:1.3.1-alpine
#        volumes:
#            - "./modules/proxy/conf/proxy.conf:/etc/nginx/conf.d/proxy.conf:ro"
#            - "/var/run/docker.sock:/tmp/docker.sock:ro"
#        ports:
#            - "80:80"
#        networks:
#            - dev

#    pim-customer-auth:
#        build:
#            target: swoole
#            context: ./docker/php
#            dockerfile: swoole.${CONTAINER_ENV:-dev}.dockerfile
#        ports:
#            - ${AUTH_PORT:-8003}:8003
#        volumes:
#            - ./pim-customer-auth:/var/www

networks:
    dev:
        external: false